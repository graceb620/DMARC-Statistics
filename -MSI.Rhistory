percent_threshold=num_threshold/num_PEOPLE_SERVED*100
)
quarter_count2 <- visit2 %>%
group_by(round_quarter) %>%
summarise(num_VISITS = n(), #num rows (visits)
num_PEOPLE_SERVED = sum(hhMembers_visit),# number of people that month
num_PEOPLE_SNAP = sum(snap=="1"),
num_threshold=sum(threshold=="1"),
num_nosnap_threshold=sum(snap=="0"&threshold=="1")
) %>% mutate(percent_snap=num_PEOPLE_SNAP/num_PEOPLE_SERVED*100,
percent_nosnap_threshold=num_nosnap_threshold/num_threshold*100,
percent_threshold=num_threshold/num_PEOPLE_SERVED*100
)
#during the dataset creation, they changed into character
monthly_count2$round_month <- as.Date(monthly_count2$round_month) # I have no clue why round_quarter is a character
quarter_count2$round_quarter <- as.Date(quarter_count2$round_quarter) # I have no clue why round_quarter is a character
### --- Create an Individual Level Dataset -------------------------------------
individuals <- all2 %>%
group_by(clientId) %>%
summarize(
afn = first(houseHoldIdAfn),
gender = first(gender),
race = first(race),
education = first(education),
foodstamps = first(foodstamps),
dietaryIssue = first(dietaryIssue),
veteran = first(veteran),
category = first(category),
incomeSource = first(incomeSource)
)
### --- Create a household level dataset ---------------------------------------
hh_data2 <- all2 %>%
group_by(houseHoldIdAfn) %>%
summarize(
householdMembers = max(householdMembers), #Number of people in household
first_visit = min(servedDate),
last_visit = max(servedDate),
first_visit_2023 = if_else(year(first_visit) == 2023, 1, 0),
first_visit_2024 = if_else(year(first_visit) == 2024, 1, 0),
visit_in_2024 = as.integer(any(year(servedDate) == 2024)), #if there was a visit in 2024
visit_count_2024 = sum(year(servedDate) == 2024),
IncomeSource = first(incomeSource),
fedPovertyLevel = first(fedPovertyLevel),
annualIncome = first(annualIncome),
foodstamps = as.integer(any(foodstamps == "Yes")),
primary_visit_location = names(which.max(table(location))), #location most frequently visited
primary_service = names(which.max(table(service))), #service most frequently used
primary_visitor_occupation = names(which.max(table(category))), #most frequent occupation
dietary_issue = as.integer(any(!dietaryIssue %in% c("None", "Unknown"))),
veteran = as.integer(any(veteran == "Yes"))
)
hh2_2024 <- hh_data2 %>%
filter(visit_in_2024=="1") %>%
select(householdMembers, visit_count_2024, IncomeSource, fedPovertyLevel,
annualIncome, foodstamps, primary_visit_location, primary_service,
primary_visitor_occupation, dietary_issue, veteran)
### --- Create CSV's -----------------------------------------------------------
write.csv(hh_data2, "Data/hh_data2.csv", row.names = FALSE)
write.csv(individuals, "Data/individual.csv", row.names=FALSE)
write.csv(visit2, "Data/visit2.csv", row.names=FALSE)
write.csv(hh2_2024, "Data/hh2_2024.csv", row.names=FALSE)
write.csv(monthly_count2, "Data/monthly_count2.csv", row.names = FALSE)
write.csv(quarter_count2, "Data/quarter_count2.csv", row.names = FALSE)
write.csv(hh2_2024, "Data/hh2_2024", row.names=FALSE)
library(lubridate)
library(tidyverse)
library(dplyr)
library(purrr)
# --- Merging the columns -----------------
API_data <- reduce(list(API_HH_Results, API_SNAP_Results),
full_join, by = c("zip code tabulation area",
"year", "state", "NAME"))
API_data <- read.csv("data/API_data.csv")
# --- Merging the columns -----------------
API_data <- reduce(list(API_HH_Results, API_SNAP_Results),
full_join, by = c("zip code tabulation area",
"year", "state", "NAME"))
source("API_Connections/API_Connection.R")
### --- API Related Datasets ---------------------------------------------------
library(lubridate)
library(tidyverse)
library(dplyr)
library(purrr)
# --- Merging the columns -----------------
API_data <- reduce(list(API_HH_Results, API_SNAP_Results),
full_join, by = c("zip code tabulation area",
"year", "state", "NAME"))
# --- Creating large dataset
API_data <- API_data %>% rename(
NumHH = B11001_001E,
SnapHH = B22003_002E,
zip_code = `zip code tabulation area`
) %>%
mutate(
SnapRatio = SnapHH / NumHH
) %>%
filter(year > 2019)
# --- Filtering to Iowa Zip codes Only -------
# Because of how the API is, post 2020 results does not let you pull by state
# However, pre 2020 does.
# FIX: Pull the zip codes from 2019 and filter so that each dataframe only include
# the iowa zip codes
zipcodes_2019 <- API_HH_Results %>%
filter(year == 2019) %>%
select(`zip code tabulation area`) %>%
distinct()  # Ensure unique ZIP codes
API_data <- API_data %>%
filter(zip_code %in% zipcodes_2019$`zip code tabulation area`)
# --- Creating Datasets for each individual year -------
API_2020 <- API_data %>% filter(year==2020)
API_2021 <- API_data %>% filter(year==2021)
API_2022 <- API_data %>% filter(year==2022)
API_2023 <- API_data %>% filter(year==2023)
# Creating CSV's
write.csv(API_data, "Data/API_data.csv", row.names = FALSE)
write.csv(API_2020, "Data/API_2020.csv", row.names = FALSE)
write.csv(API_2021, "Data/API_2021.csv", row.names = FALSE)
write.csv(API_2022, "Data/API_2022.csv", row.names = FALSE)
write.csv(API_2023, "Data/API_2023.csv", row.names = FALSE)
View(API_data)
View(API_data)
View(newData)
View(newData)
View(hh_data2)
API_data <- read.csv("API_data.csv")
API_data <- read.csv("data/API_data.csv")
API_2024 <- read.csv("data/API_2023.csv")
hh_data_2023<-read.csv('Data/hh_data23.csv', stringsAsFactors=FALSE)
hh_data <- read.csv('Data/hh_data.csv', stringsAsFactors = FALSE)
View(hh_data)
## Households that were on SNAP per year
hh_data %>%
group_by(year=year()) %>%
summarize(proportion = mean(snap)) %>%
geom_line() +
geom_point() +
labs(title = "Proportion of Outcome = 1 by Year", y = "Proportion", x = "Year") +
theme_minimal()
library(ggplot2)
library(dplyr)
## Households that were on SNAP per year
hh_data %>%
group_by(year=year()) %>%
summarize(proportion = mean(snap)) %>%
geom_line() +
geom_point() +
labs(title = "Proportion of Outcome = 1 by Year", y = "Proportion", x = "Year") +
theme_minimal()
library(lubridate)
## Households that were on SNAP per year
hh_data %>%
group_by(year=year()) %>%
summarize(proportion = mean(snap)) %>%
geom_line() +
geom_point() +
labs(title = "Proportion of Outcome = 1 by Year", y = "Proportion", x = "Year") +
theme_minimal()
## Households that were on SNAP per year
hh_data %>%
group_by(year) %>%
summarize(proportion = mean(snap)) %>%
ggplot(aes(x = year, y = proportion)) +
geom_line() +
geom_point() +
labs(title = "Proportion of SNAP by Year", x = "Year", y = "Proportion") +
theme_minimal()
View(hh_data)
library(tidyverse)
## Households that were on SNAP per year
hh_data %>%
pivot_longer(cols = starts_with("snap_"),
names_to = "year",
names_prefix = "snap_",
values_to = "snap") %>%
group_by(year) %>%
summarize(proportion = mean(snap, na.rm = TRUE)) %>%
ggplot(aes(x = as.integer(year), y = proportion)) +
geom_col(fill = "#2C77B1") +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
## Households that were on SNAP per year
tibble(
year = c(2020, 2021, 2023),
proportion = c(
mean(hh_data$snap_2020, na.rm = TRUE),
mean(hh_data$snap_2021, na.rm = TRUE),
mean(hh_data$snap_2023, na.rm = TRUE)
)
) %>%
ggplot(aes(x = factor(year), y = proportion)) +
geom_col(fill = "#4C9F70") +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
tibble(
year = c(2020, 2021, 2023),
proportion = c(
mean(hh_data$snap_2020, na.rm = TRUE),
mean(hh_data$snap_2021, na.rm = TRUE),
mean(hh_data$snap_2023, na.rm = TRUE)
)
) %>%
ggplot(aes(x = factor(year), y = proportion)) +
geom_col(fill = "#4C9F70") +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
## Households that were on SNAP per year
tibble(
year = c(2020, 2021, 2022, 2023),
proportion = c(
mean(hh_data$snap_2020, na.rm = TRUE),
mean(hh_data$snap_2021, na.rm = TRUE),
mean(hh_data$snap_2022, na.rm = TRUE),
mean(hh_data$snap_2023, na.rm = TRUE)
)
) %>%
ggplot(aes(x = factor(year), y = proportion)) +
geom_col(fill = "#4C9F70") +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
tibble(
year = c(2020, 2021, 2022, 2023),
proportion = c(
mean(hh_data$snap_2020, na.rm = TRUE),
mean(hh_data$snap_2021, na.rm = TRUE),
mean(hh_data$snap_2022, na.rm = TRUE),
mean(hh_data$snap_2023, na.rm = TRUE)
)
) %>%
ggplot(aes(x = factor(year), y = proportion)) +
geom_col(fill = "#4C9F70") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
tibble(
year = c(2020, 2021, 2022, 2023),
count = c(
sum(!is.na(hh_data$snap_2020)),
sum(!is.na(hh_data$snap_2021)),
sum(!is.na(hh_data$snap_2022)),
sum(!is.na(hh_data$snap_2023))
),
proportion = c(
mean(hh_data$snap_2020, na.rm = TRUE),
mean(hh_data$snap_2021, na.rm = TRUE),
mean(hh_data$snap_2022, na.rm = TRUE),
mean(hh_data$snap_2023, na.rm = TRUE)
)
) %>%
ggplot(aes(x = factor(year), y = proportion)) +
geom_col(fill = "#4C9F70") +
geom_text(aes(label = paste0(scales::percent(proportion), "\n(n=", count, ")")),
vjust = -0.5, size = 3.5) +
scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
labs(title = "Proportion of People on SNAP by Year",
x = "Year", y = "Proportion on SNAP") +
theme_minimal()
# Create a tibble with counts and proportions for each year
hh_data_long <- hh_data %>%
pivot_longer(cols = starts_with("snap_"),
names_to = "year",
names_prefix = "snap_",
values_to = "snap") %>%
group_by(year, snap) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count))
# Create a tibble with counts and proportions for each year
hh_data_long <- hh_data %>%
pivot_longer(cols = starts_with("snap_"),
names_to = "year",
names_prefix = "snap_",
values_to = "snap") %>%
group_by(year, snap) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(proportion = count / sum(count))
# Calculate counts of 1s and 0s for each year
data_summary <- tibble(
year = c(2020, 2021, 2022, 2023),
snap_0 = c(
sum(hh_data$snap_2020 == 0, na.rm = TRUE),
sum(hh_data$snap_2021 == 0, na.rm = TRUE),
sum(hh_data$snap_2022 == 0, na.rm = TRUE),
sum(hh_data$snap_2023 == 0, na.rm = TRUE)
),
snap_1 = c(
sum(hh_data$snap_2020 == 1, na.rm = TRUE),
sum(hh_data$snap_2021 == 1, na.rm = TRUE),
sum(hh_data$snap_2022 == 1, na.rm = TRUE),
sum(hh_data$snap_2023 == 1, na.rm = TRUE)
)
)
# Combine the counts into a long format manually
data_long <- bind_rows(
data_summary %>% select(year, snap_status = snap_0) %>% mutate(snap_status = "Not on SNAP"),
data_summary %>% select(year, snap_status = snap_1) %>% mutate(snap_status = "On SNAP")
) %>%
mutate(proportion = snap_status / sum(snap_status))
## Households that were on SNAP per year
counts <- hh_data %>%
select(snap_2020, snap_2021, snap_2022, snap_2023) %>%
pivot_longer(cols = everything(), names_to = "year", values_to = "value") %>%
count(year, value)
ggplot(counts, aes(x = year, y = n, fill = factor(value))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Year", y = "Count", fill = "Value") +
scale_fill_manual(values = c("0" = "red", "1" = "green")) +
theme_minimal()
ggplot(counts_df, aes(x = year, y = count, fill = value)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(data = counts_df %>% filter(value == 1),
aes(label = paste0(round(pct, 1), "%")),
position = position_stack(vjust = 1),
vjust = -0.2, size = 3.5) +
scale_fill_manual(values = c("0" = "gray80", "1" = "steelblue")) +
labs(x = "Year", y = "Count", fill = "SNAP Used") +
theme_minimal() +
theme(legend.position = "top")
#Proportion of Households recieving SNAP benefits
hh_data %>%
count(snap_household) %>%
ggplot(aes(x = snap_household, y = n, fill = snap_household)) +
geom_col() +
labs(
title = "Proportion of Households Receiving SNAP",
x = "SNAP Household",
y = "Count"
) +
theme_minimal()
#Proportion of Households recieving SNAP benefits
hh_data %>%
count(snap_household) %>%
ggplot(aes(x = snap_household, y = n, fill = snap_household)) +
geom_col() +
labs(
title = "Proportion of Households Receiving SNAP",
x = "SNAP Household",
y = "Count"
) +
theme_minimal()
hh_data <- read.csv('Data/hh_data.csv', stringsAsFactors = FALSE)
#Proportion of Households recieving SNAP benefits
hh_data %>%
count(snap_household) %>%
ggplot(aes(x = snap_household, y = n, fill = snap_household)) +
geom_col() +
labs(
title = "Proportion of Households Receiving SNAP",
x = "SNAP Household",
y = "Count"
) +
theme_minimal()
#First visit distribution by Year
hh_data_2023 %>%
mutate(first_visit_year = year(first_visit)) %>%
count(first_visit_year) %>%
ggplot(aes(x = as.factor(first_visit_year), y = n, fill = as.factor(first_visit_year))) +
geom_col() +
labs(title = "Households' First Visit Year", x = "Year", y = "Count") +
theme_minimal()
#Proportion of Households recieving SNAP benefits
hh_data %>%
count(snap_household) %>%
ggplot(aes(x = snap_household, y = n, fill = snap_household)) +
geom_col() +
labs(
title = "Proportion of Households Receiving SNAP",
x = "SNAP Household",
y = "Count"
) +
theme_minimal()
## If the hh was on snap during the first visit
hh_data %>%
group_by(year = year()) %>%
summarize(count = sum(snap_first_visit, na.rm = TRUE)) %>%
ggplot(aes(x = factor(year), y = count)) +  # Convert year to factor for proper labeling
geom_col(fill = "steelblue") +
labs(title = "Number of Households on SNAP During their First Visit per Year",
x = "Year",
y = "Number of Households") +
theme_minimal()
View(hh_data)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyverse)
hh_data_2023<-read.csv('Data/hh_data23.csv', stringsAsFactors=FALSE)
hh_data <- read.csv('Data/hh_data.csv', stringsAsFactors = FALSE)
## If the hh was on snap during the first visit
hh_data %>%
group_by(year = year()) %>%
summarize(count = sum(snap_first_visit, na.rm = TRUE)) %>%
ggplot(aes(x = factor(year), y = count)) +  # Convert year to factor for proper labeling
geom_col(fill = "steelblue") +
labs(title = "Number of Households on SNAP During their First Visit per Year",
x = "Year",
y = "Number of Households") +
theme_minimal()
## If the hh was on snap during the first visit
hh_data %>%
group_by(year = year(visit_date)) %>%
summarize(count = sum(snap_first_visit, na.rm = TRUE)) %>%
ggplot(aes(x = factor(year), y = count)) +  # Convert year to factor for better axis labeling
geom_col(fill = "steelblue") +
labs(title = "Number of Households on SNAP During their First Visit per Year",
x = "Year",
y = "Number of Households") +
theme_minimal()
## If the hh was on snap during the first visit
hh_data %>%
group_by(year = year(visit_date)) %>%
summarize(count = sum(snap_first_visit, na.rm = TRUE)) %>%
ggplot(aes(x = factor(year), y = count)) +  # Convert year to factor for better axis labeling
geom_col(fill = "steelblue") +
labs(title = "Number of Households on SNAP During their First Visit per Year",
x = "Year",
y = "Number of Households") +
theme_minimal()
## If the hh was on snap during the first visit
hh_data %>%
group_by(year = year(first_visit)) %>%
summarize(count = sum(snap_first_visit, na.rm = TRUE)) %>%
ggplot(aes(x = factor(year), y = count)) +  # Convert year to factor for better axis labeling
geom_col(fill = "steelblue") +
labs(title = "Number of Households on SNAP During their First Visit per Year",
x = "Year",
y = "Number of Households") +
theme_minimal()
hh_data %>%
mutate(year = year(first_visit),
snap_status = ifelse(snap_first_visit == 1, "SNAP", "Non-SNAP")) %>%
filter(!year %in% c(2018, 2019, 2024)) %>%  # Remove unwanted years
group_by(year, snap_status) %>%
summarize(total = n(), .groups = "drop") %>%
ggplot(aes(x = factor(year), y = total, fill = snap_status)) +  # Stacked bars
geom_col(color = "black") +  # Black outline for contrast
scale_fill_manual(values = c("SNAP" = "gray30", "Non-SNAP" = "gray70")) +  # Darker gray for SNAP, lighter gray for Non-SNAP
geom_text(aes(label = total), position = position_stack(vjust = 0.5), color = "black", fontface = "bold") +  # Labels inside bars
labs(
title = "Households on SNAP vs. Non-SNAP During First Visit per Year",
subtitle = "A breakdown of household participation in SNAP over time",  # Subheading added here
x = "Year",
y = "Total Households",
fill = "Household Type"
) +
theme_minimal() +
theme(legend.position = "top")  # Move legend to top for better readability
hh_data %>%
mutate(year = year(first_visit),
snap_status = ifelse(snap_first_visit == 1, "SNAP", "Non-SNAP")) %>%
filter(!year %in% c(2018, 2019, 2024)) %>%  # Remove unwanted years
group_by(year, snap_status) %>%
summarize(total = n(), .groups = "drop") %>%
ggplot(aes(x = factor(year), y = total, fill = snap_status)) +  # Stacked bars
geom_col(color = "black") +  # Black outlines for contrast
scale_fill_manual(values = c("SNAP" = "#E69F00", "Non-SNAP" = "#0072B2")) +  # Colorblind-friendly colors (orange & blue)
geom_text(aes(label = total), position = position_stack(vjust = 0.5), color = "white", fontface = "bold") +  # Labels inside bars
labs(title = "Households on SNAP vs. Non-SNAP During First Visit per Year",
x = "Year",
y = "Total Households",
fill = "Household Type") +
theme_minimal() +
theme(legend.position = "top")  # Move legend to top for better readability
hh_data %>%
mutate(year = year(first_visit),
snap_status = ifelse(snap_first_visit == 1, "SNAP", "Non-SNAP")) %>%
filter(!year %in% c(2018, 2019, 2024)) %>%  # Remove unwanted years
group_by(year, snap_status) %>%
summarize(total = n(), .groups = "drop") %>%
ggplot(aes(x = factor(year), y = total, fill = snap_status)) +  # Stacked bars
geom_col(color = "black") +  # Black outlines for contrast
scale_fill_manual(values = c("SNAP" = "#E69F00", "Non-SNAP" = "#0072B2")) +  # Colorblind-friendly colors (orange & blue)
geom_text(aes(label = total), position = position_stack(vjust = 0.5), color = "white", fontface = "bold") +  # Labels inside bars
labs(title = "First Time Households Visits to DMARC per Year",
x = "Year",
y = "Total Households",
fill = "Household Type") +
theme_minimal() +
theme(legend.position = "top")  # Move legend to top for better readability
View(API_data)
# Create the main dataset from raw csv -----------------------------------------
all <- read.csv("Data/drake_export_v8_2024-02-13_100754_rev2_nolatlong.csv")
# Cleaning of dates ------------------------------------------------------------
all <- all %